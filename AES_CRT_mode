#include <stdio.h>
#include <string.h>
#include <inttypes.h>

// cd /mnt/c/Users/anwlr/정리/sourse
// gcc week3_aes.c -o main
// ./main

#define AES128
#define Nr 10 //number round
#define Nb 16 // number byte
#define Nw 4 //number words

typedef struct _AES_ALG_INFO{
	///구조체 정의
	uint8_t Buffer[Nb];
	uint32_t Buflen;
	uint8_t ChainVar[Nb];
} _AES_ALG_INFO;
typedef _AES_ALG_INFO AES_ALG_INFO[1];



// Goal : generate 10 round keys
// Round 0 key:: a0 fa fe 17 88 54 2c b1 23 a3 39 39 2a 6c 76 05
// Round 1 key:: f2 c2 95 f2 7a 96 b9 43 59 35 80 7a 73 59 f6 7f
// Round 2 key:: 3d 80 47 7d 47 16 fe 3e 1e 23 7e 44 6d 7a 88 3b
// Round 3 key:: ef 44 a5 41 a8 52 5b 7f b6 71 25 3b db 0b ad 00
// Round 4 key:: d4 d1 c6 f8 7c 83 9d 87 ca f2 b8 bc 11 f9 15 bc
// Round 5 key:: 6d 88 a3 7a 11 0b 3e fd db f9 86 41 ca 00 93 fd
// Round 6 key:: 4e 54 f7 0e 5f 5f c9 f3 84 a6 4f b2 4e a6 dc 4f
// Round 7 key:: ea d2 73 21 b5 8d ba d2 31 2b f5 60 7f 8d 29 2f
// Round 8 key:: ac 77 66 f3 19 fa dc 21 28 d1 29 41 57 5c 00 6e
// Round 9 key:: d0 14 f9 a8 c9 ee 25 89 e1 3f 0c c8 b6 63 0c a6

uint8_t RKey[11][16] = {};

//한 줄 배열임, const:상수
static const uint8_t sbox[256] = {
	//i     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

static const uint8_t Rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

static const uint8_t rsbox[256] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

uint8_t Key[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };

uint8_t pt[16] = { 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
uint8_t ct[16] = {0, };	
uint32_t w[4] = {0,};

uint8_t cttmp[16] = {0}; // 복호화에 필요한 변수 선언

uint8_t t0, t1, t2, t3;
uint8_t tmpc0, tmpc1, tmpc2, tmpc3;


void RoundKeyGen()
{
	for (int i = 1; i<11; i++)
	{
		//step1 : rotate
		
		// == ith ==   ->  i+1 th
		// 0 4 8  (12) -> (0/13)
		// 1 5 9  (13) -> (1/14)
		// 2 6 10 (14) -> (2/15)
		// 3 7 11 (15) -> (3/12)
		
		RKey[i][0] = RKey[i-1][13];
		RKey[i][1] = RKey[i-1][14];
		RKey[i][2] = RKey[i-1][15];
		RKey[i][3] = RKey[i-1][12];

		//step2 : subbyte

		RKey[i][0] = sbox[RKey[i][0]];
		RKey[i][1] = sbox[RKey[i][1]];
		RKey[i][2] = sbox[RKey[i][2]];
		RKey[i][3] = sbox[RKey[i][3]];

		//step3 : XOR

		RKey[i][0] = RKey[i-1][0] ^ RKey[i][0] ^ Rcon[i];
		RKey[i][1] = RKey[i-1][1] ^ RKey[i][1];
		RKey[i][2] = RKey[i-1][2] ^ RKey[i][2];
		RKey[i][3] = RKey[i-1][3] ^ RKey[i][3];

		//step4 : 
		
		RKey[i][4] = RKey[i-1][4] ^ RKey[i][0];
		RKey[i][5] = RKey[i-1][5] ^ RKey[i][1];
		RKey[i][6] = RKey[i-1][6] ^ RKey[i][2];
		RKey[i][7] = RKey[i-1][7] ^ RKey[i][3];

		RKey[i][8] = RKey[i-1][8] ^ RKey[i][4];
		RKey[i][9] = RKey[i-1][9] ^ RKey[i][5];
		RKey[i][10] = RKey[i-1][10] ^ RKey[i][6];
		RKey[i][11] = RKey[i-1][11] ^ RKey[i][7];

		RKey[i][12] = RKey[i-1][12] ^ RKey[i][8];
		RKey[i][13] = RKey[i-1][13] ^ RKey[i][9];
		RKey[i][14] = RKey[i-1][14] ^ RKey[i][10];
		RKey[i][15] = RKey[i-1][15] ^ RKey[i][11];

		//return을 사용하는 경우는 에러를 내놓을 때

	}

}

void PrintRKey()
{
	for (int i = 1; i<Nr+1; i++)
{
	printf("Round %d key :: ", i);
	for (int j = 0; j < 16; j++)
	{
		printf("%02x ", RKey[i][j]);

	}
	printf("\n");

}

}

void PrintValue(uint8_t *ct) //*은 포인터
{
	for (int j = 0; j < 16; j++)
	{
		printf("%02x ", ct[j]);

	}
	printf("\n");

}

void SubByte()
{
	for(int j = 0; j < Nb; j++)
		{
			ct[j] = sbox[ct[j]];
		}
		//printf("SubByte :");
		//PrintValue(ct);
}

void ShiftRows()
{
	// ShiftRows
	// byte-to-word
	//w[0] = ct[0] ct[4] ct[8] ct[12]
	for(int j = 0; j < Nw; j++) // word라는 공간에 32bit씩 뜯어넣기
	{
		w[j] = (ct[0+j]<<24) ^ (ct[4+j]<<16) ^ (ct[8+j]<<8) ^ ct[12+j];
	}

	// Shift 연산
	w[1] = (w[1]<<8 ) ^ ((w[1]&0xff000000) >> 24);
	w[2] = (w[2]<<16) ^ ((w[2]&0xffff0000) >> 16);
	w[3] = (w[3]<<24) ^ ((w[3]&0xffffff00) >> 8 );

	// 다시 ct로 합치기
	for(int j = 0; j <Nw; j++)
	{
		ct[   j] = ((w[j]&0xff000000) >> 24) & 0xff;
		ct[ 4+j] = ((w[j]&0x00ff0000) >> 16) & 0xff;
		ct[ 8+j] = ((w[j]&0x0000ff00) >>  8) & 0xff;
		ct[12+j] = ((w[j]&0x000000ff)      ) & 0xff;
		}

		//printf("ShiftRow :");
		//PrintValue(ct);
}

void MixColumn()
{
	// mixcolumn
	for(int i = 0; i < 16; i+=4)
	{
		t0 = ((ct[i] >> 7) & 1) * 0x1b ^ (ct[i] << 1); //ct[0] * 02(x)
		t1 = ((ct[i+1] >> 7) & 1) * 0x1b ^ (ct[i+1] << 1) ^ ct[i+1]; //ct[1] * 03 (x+1)
		tmpc0 = t0 ^ t1 ^ ct[i+2] ^ ct[i+3]; //new ct[0]

		t0 = ((ct[i+1] >> 7) & 1) * 0x1b ^ (ct[i+1] << 1);
		t1 = ((ct[i+2] >> 7) & 1) * 0x1b ^ (ct[i+2] << 1) ^ ct[i+2];
		tmpc1 = ct[i] ^ t0 ^ t1 ^ ct[i+3];

		t0 = ((ct[i+2] >> 7) & 1) * 0x1b ^ (ct[i+2] << 1);
		t1 = ((ct[i+3] >> 7) & 1) * 0x1b ^ (ct[i+3] << 1) ^ ct[i+3];
		tmpc2 = ct[i] ^ ct[i+1] ^ t0 ^ t1;

		t0 = ((ct[i+3] >> 7) & 1) * 0x1b ^ (ct[i+3] << 1);
		t1 = ((ct[i] >> 7) & 1) * 0x1b ^ (ct[i] << 1) ^ ct[i];
		tmpc3 = t1 ^ ct[i+1] ^ ct[i+2] ^ t0;

		ct[i  ] = tmpc0;
		ct[i+1] = tmpc1;
		ct[i+2] = tmpc2;
		ct[i+3] = tmpc3;
	}

	//printf("mix column :");
	//PrintValue(ct);

}

void AddRoundKey(int nrnd)
{
	for(int i = 0; i < Nb; i++)
		{
			ct[i] = ct[i]^RKey[nrnd][i];

		}
	//printf("AddRoundKey :");
	//PrintValue(ct);
}

uint8_t InverseMixColumn(uint8_t a, uint8_t x)
{
	uint8_t res = 0; // 결과값 

	res ^= (x&1)*a ;
	res ^= ((x>>1) & 1) * ((((a>>7) & 1)*0x1b) ^ (a<<1)); //a*x   if x^6 = 1 -> x^8 = 0x1b
	res ^= ((x>>2) & 1) * ((((a>>7) & 1)*0x36) ^ (((a>>6) & 1) * 0x1b) ^ (a<<2)); //a*x^2  if x^7 = 1 -> x^9 = 0x36
	res ^= ((x>>3) & 1) * ((((a>>7) & 1)*0x6c) ^ (((a>>6) & 1) * 0x36) ^ (((a>>5) & 1) * 0x1b) ^ (a<<3)); // if x^5 = 1 -> a^10 = 0x6c 

	return res;

}

void Inverse_ShiftRow()
{
	for(int j = 0; j < Nw; j++)
		{
			w[j] = (cttmp[0+j]<<24) ^ (cttmp[4+j]<<16) ^ (cttmp[8+j]<<8) ^ cttmp[12+j];
		}

		w[1] = (w[1] >> 8 ) ^ ((w[1] & 0x000000ff) << 24);
		w[2] = (w[2] >> 16) ^ ((w[2] & 0x0000ffff) << 16);
		w[3] = (w[3] >> 24) ^ ((w[3] & 0x00ffffff) << 8 );

		for(int j = 0; j <Nw; j++)
		{
			cttmp[j   ] = ((w[j]&0xff000000) >> 24) & 0xff;
			cttmp[4+j ] = ((w[j]&0x00ff0000) >> 16) & 0xff;
			cttmp[8+j ] = ((w[j]&0x0000ff00) >>  8) & 0xff;
			cttmp[12+j] = ((w[j]&0x000000ff)      ) & 0xff;
			}

		printf("= DEC = Inverse ShiftRow : ");
		PrintValue(cttmp);

}

void Inverse_Sbox()
{
	for(int j = 0; j < Nb; j++)
		{
			cttmp[j] = rsbox[cttmp[j]];
		}
		printf("= DEC = Inverse SubByte :");
		PrintValue(cttmp);
}

void Inverse_Mixcolumn()
{
	for(int i = 0; i < 16; i+=4)
		{
			tmpc0  = InverseMixColumn(cttmp[i],0x0e);
			tmpc0 ^= InverseMixColumn(cttmp[i+1],0x0b);
			tmpc0 ^= InverseMixColumn(cttmp[i+2],0x0d);
			tmpc0 ^= InverseMixColumn(cttmp[i+3],0x09);
			
			tmpc1  = InverseMixColumn(cttmp[i],0x09);
			tmpc1 ^= InverseMixColumn(cttmp[i+1],0x0e);
			tmpc1 ^= InverseMixColumn(cttmp[i+2],0x0b);
			tmpc1 ^= InverseMixColumn(cttmp[i+3],0x0d);

			tmpc2  = InverseMixColumn(cttmp[i],0x0d);
			tmpc2 ^= InverseMixColumn(cttmp[i+1],0x09);
			tmpc2 ^= InverseMixColumn(cttmp[i+2],0x0e);
			tmpc2 ^= InverseMixColumn(cttmp[i+3],0x0b);

			tmpc3  = InverseMixColumn(cttmp[i],0x0b);
			tmpc3 ^= InverseMixColumn(cttmp[i+1],0x0d);
			tmpc3 ^= InverseMixColumn(cttmp[i+2],0x09);
			tmpc3 ^= InverseMixColumn(cttmp[i+3],0x0e);

			cttmp[i] = tmpc0;
			cttmp[i+1] = tmpc1;
			cttmp[i+2] = tmpc2;
			cttmp[i+3] = tmpc3;
		}
	printf("= DEC = Inverse MixColumn : ");
	PrintValue(cttmp);
}

void Dec_AddRoundKey(int nrnd)
{
	for(int i = 0; i < Nb; i++)
		{
			cttmp[i] = cttmp[i]^RKey[Nr-1-nrnd][i];

		}
		printf("= DEC = AddRoundKey : ");
		PrintValue(cttmp);
}

void AES_enc(uint8_t *ct, uint8_t *pt)
{
	// 0Round ct <= pt^Key
	for(int i = 0; i < Nb; i++)
	{
		ct[i] = pt[i]^Key[i];

	}
	PrintValue(ct);

	// 1Round ~ Last Round - 1
	for(int nrnd = 0; nrnd<Nr-1; nrnd++)
	{
		printf("== %d Round ==\n", nrnd);

		SubByte();
		ShiftRows();
		MixColumn();
		AddRoundKey(nrnd+1);
		
	}

	// Last Round
	SubByte();
	ShiftRows();
	AddRoundKey(Nr);

	PrintValue(ct);

}

void AES_dec(uint8_t *ct, uint8_t *pt)
{
	// first AddRoundKey
	for(int i = 0; i < Nb; i++)
		{
			cttmp[i] = ct[i]^RKey[Nr][i];

		}
	printf("= DEC = AddRoundKey : ");
	PrintValue(cttmp);

	//1~9 Round
	for(int nrnd = 0; nrnd < 9; nrnd++)
	{

		printf("== %d Round ==\n", nrnd);
		//inverse shift row
		Inverse_ShiftRow();

		//Inverse S-BOX
		Inverse_Sbox();
		
		//Add round key
		Dec_AddRoundKey(nrnd);

		//Inverse Mixcolumn
		Inverse_Mixcolumn();
	
	}

	//last Round
	printf("== last Round ==\n");
	Inverse_ShiftRow();
	Inverse_Sbox();
	Dec_AddRoundKey(Nr-1);

	printf("plaintext = ");
	PrintValue(cttmp); //pt 32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34
}

void aes_ctr_init(AES_ALG_INFO ctx, uint8_t *Nonce) 
{	
	// 구조체 초기화
	// Nonce 정보 입력받기, 입력정보 초기화
	memset(ctx ->Buffer, 0, sizeof(uint8_t)*Nb);
	memcpy(ctx -> ChainVar, Nonce, sizeof(uint8_t)*Nb);
	ctx -> Buflen - 0;
}

void aes_ctr_inc(uint8_t *counter)
{
	// IV 벡터 (Nonce 벡터) update
	// 넌스값은 단순히 +1하면 안되고, 그 전에 어떠한 경우에도 겹치는 일이 없어야 한다. 
	// 0~255까지는 +1해주면 괜찮은데 255+1 = 0 이 되므로 그걸 방지하고자 함
	// 우리는 32bit(■ ■ ■ ■)가 0 이되면 그 다음 32bit(■ ■ ■ ■)에 +1 이런식으로 하고자 함.

	// word라는 공간에 32bit씩 뜯어넣기
	uint32_t w = 0;
	w =  (counter[0]<<24) ^ (counter[1]<<16) ^ (counter[2]<<8) ^ counter[3];
	w++;
	w = w&0xffffffff;

	counter[0] = ((w & 0xff000000) >> 24) & 0xff;
	counter[1] = ((w & 0x00ff0000) >> 24) & 0xff;
	counter[2] = ((w & 0x0000ff00) >> 24) & 0xff;
	counter[3] = ((w & 0x0000000ff) >> 24) & 0xff;

	if(w) // w != 0
		return;

	w =  (counter[4]<<24) ^ (counter[5]<<16) ^ (counter[6]<<8) ^ counter[7];
	w++;
	w = w&0xffffffff;

	counter[4] = ((w & 0xff000000) >> 24) & 0xff;
	counter[5] = ((w & 0x00ff0000) >> 24) & 0xff;
	counter[6] = ((w & 0x0000ff00) >> 24) & 0xff;
	counter[7] = ((w & 0x0000000ff) >> 24) & 0xff;
	
	if(w) // w != 0
		return;

	w =  (counter[8]<<24) ^ (counter[9]<<16) ^ (counter[10]<<8) ^ counter[11];
	w++;
	w = w&0xffffffff;

	counter[8] = ((w & 0xff000000) >> 24) & 0xff;
	counter[9] = ((w & 0x00ff0000) >> 24) & 0xff;
	counter[10] = ((w & 0x0000ff00) >> 24) & 0xff;
	counter[11] = ((w & 0x0000000ff) >> 24) & 0xff;

	if(w) // w != 0
		return;

	w =  (counter[12]<<24) ^ (counter[13]<<16) ^ (counter[14]<<8) ^ counter[15];
	w++;
	w = w&0xffffffff;

	counter[12] = ((w & 0xff000000) >> 24) & 0xff;
	counter[13] = ((w & 0x00ff0000) >> 24) & 0xff;
	counter[14] = ((w & 0x0000ff00) >> 24) & 0xff;
	counter[15] = ((w & 0x0000000ff) >> 24) & 0xff;

}

void byte_xor(uint8_t *ct, uint8_t *pt)
{
	// 32 byte이면 for을 16까지, 그 다음엔 i+16~ 이렇게 해주면 되지만
	// 어디까지 해야하는지 모르니까 포인터를 옮겨줍니다.
	for(int i =0; i<Nb; i++)
	{
		ct[i] ^= pt[i];
	}
}

void aes_ctr_update(AES_ALG_INFO ctx, uint8_t *ct, uint32_t *ctLen, uint8_t *pt, uint32_t ptLen)
{
	ctx -> Buflen = ptLen;  
	while (ctx -> Buflen >=Nb)
	{
		AES_enc(ct, ctx->ChainVar);
		aes_ctr_inc(ctx -> ChainVar);

		*ctLen += Nb;
		ctx -> Buflen -= Nb;
		// ct = ct^pt
		byte_xor(ct, pt);
		pt += Nb; //포인터가 이동된 상태. 16씩 끊은거에 처음으로 들어가게 지정
		ct += Nb;
	}
	memcpy(ctx -> Buffer, pt, ctx -> Buflen);
}

void aes_ctr_final(AES_ALG_INFO ctx, uint8_t *ct, uint32_t *ctLen)
{	
	int len = *ctLen;
	if(ctx -> Buflen != 0)
	{
		AES_enc(ct, ctx->ChainVar);
		for(int i=0; i < ctx->Buflen; i++)
		{
			ct[i+len] ^= ctx -> Buffer[i];
		}
	}
	ctLen = ctLen + ctx -> Buflen;
}


void main()
{
	memcpy(RKey[0], Key, sizeof(Key)); //라운드 키 생성하기 편하려고 임시로 만들어 준거
	
	RoundKeyGen();

	AES_enc(ct, pt);
	AES_dec(ct, pt);

	AES_ALG_INFO ctx;
	uint8_t Nonce[Nb] = {0,};
	uint8_t ctr_ct[Nb] = {0,};
	uint8_t ctr_pt[Nb] = {0,};
	uint32_t ctLen = 0;
	uint32_t ptLen = 16;

	memcpy(Nonce, pt, sizeof(uint8_t)*Nb);

	aes_ctr_init(ctx, Nonce);
	aes_ctr_update(ctx, ctr_ct, &ctLen, ctr_pt, ptLen);
	aes_ctr_final(ctx, ctr_ct, &ctLen);

	print("ctr ciphertext: ");
	PrintValue(ctr_ct);

	print("ctr ciphertext len: %d \n", ctLen);


}
